# =============================================================================
# Node.js Authentication Project - Environment Variables Example
# =============================================================================
# Copy this file to .env and fill in your actual values
# DO NOT commit your actual .env file to version control

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Application name (used in 2FA QR codes and app identification)
APP_NAME=NodeAuth

# Application version (useful for API responses and logging)
APP_VERSION=1.0.0

# Node.js environment (development, production, test)
NODE_ENV=development

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL database connection URL
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://username:password@localhost:5432/node_auth

# =============================================================================
# JWT CONFIGURATION
# =============================================================================

# JWT secret key (REQUIRED - must be at least 32 characters long)
# Generate a secure random string: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=your-super-secret-jwt-key-at-least-32-characters-long

# JWT token expiration time (default: 15 minutes)
JWT_EXPIRES_IN=15m

# JWT refresh token expiration time (default: 7 days)
JWT_REFRESH_EXPIRES_IN=7d

# =============================================================================
# ENCRYPTION CONFIGURATION (for 2FA secrets)
# =============================================================================

# Encryption key for version 1 (REQUIRED - must be at least 32 characters long)
# Generate a secure random string: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
ENCRYPTION_KEY_V1=your-encryption-key-v1-at-least-32-characters-long

# Encryption key for version 2 (optional - for key rotation)
# Generate a secure random string: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
ENCRYPTION_KEY_V2=your-encryption-key-v2-at-least-32-characters-long

# Encryption version to use for new data (v1 or v2, default: v1)
ENCRYPTION_VERSION_FOR_NEW_DATA=v1

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Port number for the server (default: 3000)
PORT=3000

# =============================================================================
# RATE LIMITING CONFIGURATION
# =============================================================================

# General rate limiting - window in milliseconds (default: 15 minutes)
RATE_LIMIT_WINDOW_MS=900000

# General rate limiting - max requests per window (default: 100)
RATE_LIMIT_MAX_REQUESTS=100

# Authentication rate limiting - window in milliseconds (default: 15 minutes)
RATE_LIMIT_AUTH_WINDOW_MS=900000

# Authentication rate limiting - max requests per window (default: 5)
RATE_LIMIT_AUTH_MAX_REQUESTS=5

# 2FA rate limiting - window in milliseconds (default: 15 minutes)
RATE_LIMIT_2FA_WINDOW_MS=900000

# 2FA rate limiting - max requests per window (default: 3)
RATE_LIMIT_2FA_MAX_REQUESTS=3

# =============================================================================
# CLEANUP JOB CONFIGURATION
# =============================================================================

# Cleanup job schedule (cron format, default: daily at 2 AM)
CLEANUP_SCHEDULE=0 2 * * *

# Cleanup job timezone (default: America/New_York)
CLEANUP_TIMEZONE=America/New_York

